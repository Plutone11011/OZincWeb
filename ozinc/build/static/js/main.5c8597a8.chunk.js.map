{"version":3,"sources":["serviceWorker.js","Table.js","ChangeInputData.js","index.js"],"names":["Boolean","window","location","hostname","match","OilsTable","this","props","results","oil_names","Object","keys","oil_values","map","key","target_name","target_distance","target_components_names","target_components_values","voc_concentrations","JSON","parse","className","responsive","bordered","oil_name","oil_value","index","target_component_name","Array","from","array_concentration","component_concentration","_index","React","Component","ChangeInputData","state","data","fetch","then","response","json","res","setState","columns","name","dataField","text","editor","Type","TEXTAREA","validator","newValue","row","column","found","test","valid","message","unshift","editable","products","forEach","conc","push","voc","oil0","oil1","oil2","oil3","oil4","oil5","oil6","oil7","oil8","oil9","oil10","keyField","cellEdit","cellEditFactory","mode","App","target","result","isLoading","hidden","onOilsListClick","bind","onButtonClick","error","console","log","e","method","headers","body","stringify","previousTarget","nextTarget","Navbar","expand","sticky","Brand","href","Toggle","aria-controls","Collapse","id","Nav","NavItem","NavLink","as","Link","to","path","NavDropdown","title","Item","onClick","style","color","Button","variant","disabled","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c8597a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n//import oil from './oil.jpg';\nimport './Table.css';\nimport Table from 'react-bootstrap/Table'\n\nclass OilsTable extends React.Component {\n\n  \n\n  render(){\n    \n    if (this.props.results){\n      //make an array of values ensuring it's in the same order as the keys\n      const oil_names = Object.keys(this.props.results[\"Oils Composition:\"]);\n      const oil_values = oil_names.map(key => {\n        return this.props.results[\"Oils Composition:\"][key] ;\n      });\n\n      const target_name = this.props.results[\"Target name:\"];\n      const target_distance = this.props.results[\"Distance from target:\"];\n\n      const target_components_names = Object.keys(this.props.results['Target components:']);\n      const target_components_values = target_components_names.map(key => {\n        return this.props.results['Target components:'][key];\n      });\n\n      //const voc_concentrations = Function(`\"use strict\"; return ${this.props.results[\"VOC Concentrations:\"]}`)();\n      const voc_concentrations = JSON.parse(this.props.results[\"VOC Concentrations:\"]);\n      return (\n        <div className=\"App\">\n          <p>{`Distanza dal target: ${target_distance}`}</p>\n          <Table responsive=\"sm\" bordered='true'>\n            <thead>\n              <tr>\n                <th>\\</th>\n                {oil_names.map(oil_name => (\n                  <th key={oil_name}>{oil_name}</th>\n                ))}\n                <th className=\"target-name\">{target_name}</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>%</td>\n                {oil_values.map((oil_value, index) => (\n                  <td key={`${oil_names[index]}%`}>{oil_value}</td>\n                ))}\n                <td className=\"target-name\">100%</td>\n              </tr>\n              {target_components_names.map((target_component_name, index) => (\n                <tr key={`${target_component_name}${index}`}> {/*create a row for each component, then a cell for each element of the index column of the matrix */}\n                  <td key={target_component_name}>{target_component_name}</td>\n                  {Array.from(voc_concentrations, array_concentration => array_concentration[index]).map((component_concentration, _index) => (\n                    <td key={`${oil_names[_index]} x ${component_concentration}`}>{component_concentration}</td>\n                  ))}\n                  <td className=\"target-name\" key={`${target_name} x ${target_component_name}`}>{target_components_values[index]}</td>\n                </tr>\n                  ))}\n            </tbody>\n          </Table>\n        </div>\n      );\n    }\n    else {\n      return(\n        <div className=\"App\">\n        </div>\n      )\n    }\n  }\n}\n\nexport default OilsTable;\n","import React from \"react\";\n// Import React Table\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport cellEditFactory, {Type} from 'react-bootstrap-table2-editor';\n\n\nclass ChangeInputData extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null\n    };\n  }\n\n  componentDidMount(){\n      fetch('/data/concentrations')\n        .then(response => response.json())\n        .then((res) => {\n            this.setState({data: res});\n        })\n  }\n\n  render() {\n    if (this.state.data){\n        let columns = this.state.data['oils'].map((name, index)=>{\n            \n            return {\n                dataField: `oil${index}`,\n                text: name,\n                editor: Type.TEXTAREA,\n                validator: (newValue, row, column)=>{\n                  const regex = /^((0(\\.\\d+)?)|([1-9]\\d*(\\.\\d+)?))$/g ;\n                  let found = regex.test(newValue);\n                  if (!found){\n                    return {\n                      valid: false,\n                      message: 'Not a decimal number'\n                    }\n                  }\n                  return found ;\n                }\n            }\n        });\n        columns.unshift({dataField: 'voc',text:'/', editable: false});\n        let products = [];\n        this.state.data['concentrations'].forEach((conc, index)=>{\n            \n            products.push( {\n                voc: this.state.data['voc'][index],\n                oil0: conc[0],\n                oil1: conc[1],\n                oil2: conc[2],\n                oil3: conc[3],\n                oil4: conc[4],\n                oil5: conc[5],\n                oil6: conc[6],\n                oil7: conc[7],\n                oil8: conc[8],\n                oil9: conc[9],\n                oil10: conc[10]\n            });\n        });\n        return (\n        <div>\n            <BootstrapTable \n              data={products} \n              keyField='c_table' \n              columns={columns} \n              cellEdit={cellEditFactory({mode: 'click'})}/>\n        </div>\n        );\n    }\n    else {\n        return <div></div>\n    }\n  }\n}\n\nexport default ChangeInputData ;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Button from 'react-bootstrap/Button';\nimport {\n    BrowserRouter,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\nimport NavItem from 'react-bootstrap/NavItem';\nimport NavLink from 'react-bootstrap/NavLink';\n//Custom components\nimport OilsTable from './Table';\nimport ChangeInputData from './ChangeInputData';\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        //state\n        this.state = {\n            target: null,\n            result: null,\n            isLoading: false,\n            hidden: false\n        } ; //it's gonna be set with minizinc parsed result and the target name\n        this.onOilsListClick = this.onOilsListClick.bind(this);\n        this.onButtonClick = this.onButtonClick.bind(this);\n    }\n\n    componentDidMount(){\n        fetch('/getMinizincResults')\n            .then(response => response.json())\n            .then((result) => {\n                \n\n                this.setState({target: result['Target name:'], result: result});\n                \n            },\n            (error)=>{\n            console.log(error);  \n            }); \n    }\n\n    onOilsListClick(e){\n        fetch('/changeTarget',{\n            method: 'PUT',\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8'\n            },\n            body: JSON.stringify({previousTarget: this.state.target, nextTarget: e.target.text})\n        })\n            .then(response => response.json())\n            .then((result)=>{\n                //update state with updated data\n                this.setState({target: result['Target name:'], result: result});\n            })\n    }\n\n    onButtonClick(){\n        this.setState({isLoading: true});\n        fetch('/getMinizincResults')\n            .then(response => response.json())\n            .then((result) => {\n            this.setState({target: result['Target name:'], result: result, isLoading: false});\n            },\n            (error)=>{\n            console.log(error);  \n            });\n    }\n\n    render(){\n        if (this.state.result){\n            const buttonStyles = {\n                display: 'flex',\n                alignItems: 'center'\n            }\n            if (!this.state.hidden){\n                return (\n                    <BrowserRouter>\n                    <Navbar className=\"bg-olive\" expand=\"lg\" sticky='top'>\n                        <Navbar.Brand href=\"\">OZinc</Navbar.Brand>\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\n                            <Nav className=\"mr-auto\">\n                                <NavItem href=\"/\">\n                                    <NavLink as={Link} to=\"/\">Home</NavLink>\n                                </NavItem>\n                                <NavItem href=\"/data\">\n                                    <NavLink as={Link} to=\"/data\">Concentrazioni</NavLink>\n                                </NavItem>\n                                <NavDropdown title=\"Target\" id=\"basic-nav-dropdown\" >\n                                    {Object.keys(this.state.result[\"Oils Composition:\"]).map((oil_names, index) => (\n                                        <NavDropdown.Item key={'navdropdown'+oil_names} onClick={this.onOilsListClick}>{oil_names}</NavDropdown.Item> \n                                    ))}\n                                \n                                <NavDropdown.Item key={'navdropdown_target'} style={{color: '#708238'}} onClick={this.onOilsListClick}>{this.state.result['Target name:']}</NavDropdown.Item>\n                                </NavDropdown>\n                                <Button variant=\"primary\" disabled={this.isLoading} \n                                onClick={this.onButtonClick}>\n                                {this.isLoading ? 'Loading…' : 'Calcola'}\n                                </Button>\n                                \n                            </Nav>\n                        </Navbar.Collapse>\n                    </Navbar>\n                    <Switch>\n                        <Route path=\"/data\">\n                            <ChangeInputData/>\n                        </Route>\n                        <Route path=\"/\">\n                            <OilsTable results={this.state.result} />\n                        </Route>\n                    </Switch>\n                </BrowserRouter>\n                );\n            } \n            else {\n                return (\n                    <BrowserRouter>\n                        <Navbar className=\"bg-olive\" expand=\"lg\" sticky='top'>\n                            <Navbar.Brand href=\"\">OZinc</Navbar.Brand>\n                            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                            <Navbar.Collapse id=\"basic-navbar-nav\">\n                                <Nav className=\"mr-auto\">\n                                    <NavItem href=\"/\">\n                                        <NavLink as={Link} to=\"/\">Home</NavLink>\n                                    </NavItem>\n                                    <NavItem href=\"/data\">\n                                        <NavLink as={Link} to=\"/data\">Concentrazioni</NavLink>\n                                    </NavItem>\n                                </Nav>\n                            </Navbar.Collapse>\n                        </Navbar>\n                        <Switch>\n                            <Route path=\"/data\">\n                                <ChangeInputData/>\n                            </Route>\n                            <Route path=\"/\">\n                                <OilsTable results={this.state.result} />\n                            </Route>\n                        </Switch>\n                    </BrowserRouter>\n                );\n            }\n                \n            \n        }\n        else {\n            return(\n                <div className=\"App\">\n                    \n                </div>\n            )\n        }\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}