{"version":3,"sources":["serviceWorker.js","Table.js","ChangeInputData.js","index.js"],"names":["Boolean","window","location","hostname","match","OilsTable","this","props","results","oil_names","Object","keys","oil_values","map","key","target_name","target_distance","target_components_names","target_components_values","voc_concentrations","JSON","parse","className","responsive","bordered","oil_name","oil_value","index","target_component_name","Array","from","array_concentration","component_concentration","_index","React","Component","ChangeInputData","state","data","n","rows","concentrations","columns","columnsDataField","onTableChange","bind","onButtonClick","fetch","then","response","json","res","setState","type","newState","rowIndex","indexOf","cellEdit","rowId","columnIndex","dataField","parseFloat","newValue","voc","oils","method","headers","body","stringify","newCnc","result","name","text","validator","row","column","found","test","valid","message","unshift","editable","products","forEach","conc","push","Button","variant","disabled","isLoading","onClick","style","margin","bootstrap4","keyField","remote","filter","pagination","sort","cellEditFactory","mode","App","target","hidden","onOilsListClick","error","console","log","e","previousTarget","nextTarget","Navbar","expand","sticky","Brand","href","Toggle","aria-controls","Collapse","id","Nav","NavItem","NavLink","as","Link","to","path","display","width","height","alignItems","justifyContent","DropdownButton","title","Dropdown","Item","eventKey","color","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fffa99e4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n//import oil from './oil.jpg';\r\nimport './Table.css';\r\nimport Table from 'react-bootstrap/Table'\r\n\r\nclass OilsTable extends React.Component {\r\n\r\n  \r\n\r\n  render(){\r\n    \r\n    if (this.props.results){\r\n      //make an array of values ensuring it's in the same order as the keys\r\n      const oil_names = Object.keys(this.props.results[\"Oils Composition:\"]);\r\n      const oil_values = oil_names.map(key => {\r\n        return this.props.results[\"Oils Composition:\"][key] ;\r\n      });\r\n\r\n      const target_name = this.props.results[\"Target name:\"];\r\n      const target_distance = this.props.results[\"Distance from target:\"];\r\n\r\n      const target_components_names = Object.keys(this.props.results['Target difference:']);\r\n      const target_components_values = target_components_names.map(key => {\r\n        return this.props.results['Target difference:'][key];\r\n      });\r\n\r\n      //const voc_concentrations = Function(`\"use strict\"; return ${this.props.results[\"VOC Concentrations:\"]}`)();\r\n      const voc_concentrations = JSON.parse(this.props.results[\"VOC Concentrations:\"]);\r\n      return (\r\n        <div className=\"App\">\r\n          <p>{`Distanza dal target: ${target_distance}`}</p>\r\n          <Table responsive=\"sm\" bordered='true'>\r\n            <thead>\r\n              <tr>\r\n                <th>\\</th>\r\n                {oil_names.map(oil_name => (\r\n                  <th key={oil_name}>{oil_name}</th>\r\n                ))}\r\n                <th className=\"target-name\">{target_name}</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>%</td>\r\n                {oil_values.map((oil_value, index) => (\r\n                  <td key={`${oil_names[index]}%`}>{oil_value}</td>\r\n                ))}\r\n                <td className=\"target-name\">100%</td>\r\n              </tr>\r\n              {target_components_names.map((target_component_name, index) => (\r\n                <tr key={`${target_component_name}${index}`}> {/*create a row for each component, then a cell for each element of the index column of the matrix */}\r\n                  <td key={target_component_name}>{target_component_name}</td>\r\n                  {Array.from(voc_concentrations, array_concentration => array_concentration[index]).map((component_concentration, _index) => (\r\n                    <td key={`${oil_names[_index]} x ${component_concentration}`}>{component_concentration}</td>\r\n                  ))}\r\n                  <td className=\"target-name\" key={`${target_name} x ${target_component_name}`}>{target_components_values[index]}</td>\r\n                </tr>\r\n                  ))}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      return(\r\n        <div className=\"App\">\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default OilsTable;\r\n","import React from \"react\";\r\n// Import mdb react table\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport cellEditFactory, {Type} from 'react-bootstrap-table2-editor';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass ChangeInputData extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: null\r\n    };\r\n    const range = n => [...Array(n).keys()] ;\r\n    \r\n    //properties of state object\r\n    this.rows = null ;\r\n    this.concentrations = null;\r\n    this.columns = null ;\r\n\r\n    //array for dataField of columns \r\n    this.columnsDataField = range(11).map( n => `oil${n}`);\r\n\r\n    this.onTableChange = this.onTableChange.bind(this);\r\n    this.onButtonClick = this.onButtonClick.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n      fetch('/data/concentrations')\r\n        .then(response => response.json())\r\n        .then((res) => {\r\n            this.rows = res['voc'];\r\n            this.concentrations = res['concentrations'];\r\n            this.columns = res['oils'];\r\n            this.setState({data: res});\r\n        })\r\n  }\r\n\r\n  onTableChange(type, newState){ \r\n    if (type == 'cellEdit'){\r\n      let rowIndex = this.rows.indexOf(newState.cellEdit.rowId);\r\n      let columnIndex = this.columnsDataField.indexOf(newState.cellEdit.dataField);\r\n      this.concentrations[rowIndex][columnIndex] = parseFloat(newState.cellEdit.newValue);\r\n      this.setState( {data: {\r\n        voc: this.rows,\r\n        oils: this.columns,\r\n        concentrations: this.concentrations\r\n      }});\r\n\r\n    }\r\n\r\n  }\r\n\r\n  //save changes to server\r\n  onButtonClick(){\r\n    fetch('/data/changeConcentrations',{\r\n      method: 'PUT',\r\n      headers: {\r\n          'Content-type': 'application/json; charset=UTF-8'\r\n      },\r\n      body: JSON.stringify({newCnc: this.concentrations})\r\n    })\r\n      .then(response => response.json())\r\n      .then((result)=>{\r\n          \r\n      })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.data){\r\n        let columns = this.state.data['oils'].map((name, index)=>{\r\n            \r\n            return {\r\n                dataField: this.columnsDataField[index],\r\n                text: name,\r\n                validator: (newValue, row, column)=>{\r\n                  let found = /^((0(\\.\\d+)?)|([1-9]\\d*(\\.\\d+)?))$/g.test(newValue);\r\n                  if (!found){\r\n                    return {\r\n                      valid: false,\r\n                      message: 'Not a decimal number'\r\n                    }\r\n                  }\r\n                  return found ;\r\n                }\r\n            }\r\n        });\r\n        columns.unshift({dataField: 'voc',text:'/', editable: false});\r\n        let products = [];\r\n        this.state.data['concentrations'].forEach((conc, index)=>{\r\n            \r\n            products.push( {\r\n                voc: this.state.data['voc'][index],\r\n                [this.columnsDataField[0]]: conc[0],\r\n                [this.columnsDataField[1]]: conc[1],\r\n                [this.columnsDataField[2]]: conc[2],\r\n                [this.columnsDataField[3]]: conc[3],\r\n                [this.columnsDataField[4]]: conc[4],\r\n                [this.columnsDataField[5]]: conc[5],\r\n                [this.columnsDataField[6]]: conc[6],\r\n                [this.columnsDataField[7]]: conc[7],\r\n                [this.columnsDataField[8]]: conc[8],\r\n                [this.columnsDataField[9]]: conc[9],\r\n                [this.columnsDataField[10]]: conc[10]\r\n            });\r\n        });\r\n        return (\r\n        <div>\r\n            <Button variant=\"primary\" disabled={this.isLoading} \r\n                            onClick={this.onButtonClick}\r\n                            style={{\r\n                                margin: '20px'\r\n                            }}>\r\n                            Save\r\n            </Button>\r\n            <BootstrapTable\r\n              bootstrap4={true}\r\n              data={products} \r\n              keyField='voc' \r\n              columns={columns}\r\n              remote={ {\r\n                filter: false,\r\n                pagination: false,\r\n                sort: false,\r\n                cellEdit: true\r\n              } }\r\n              onTableChange={this.onTableChange} \r\n              cellEdit={cellEditFactory({\r\n                mode: 'click',\r\n                /*afterSaveCell: (oldValue, newValue, row, column) => { \r\n                  console.log(column);\r\n                  console.log(row);\r\n\r\n                }*/\r\n              })}\r\n              />\r\n        </div>\r\n        );\r\n    }\r\n    else {\r\n        return <div></div>\r\n    }\r\n  }\r\n}\r\n\r\nexport default ChangeInputData ;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {\r\n    BrowserRouter,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\nimport NavItem from 'react-bootstrap/NavItem';\r\nimport NavLink from 'react-bootstrap/NavLink';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n//Custom components\r\nimport OilsTable from './Table';\r\nimport ChangeInputData from './ChangeInputData';\r\n\r\nclass App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        //state\r\n        this.state = {\r\n            target: null,\r\n            result: null,\r\n            isLoading: false,\r\n            hidden: false\r\n        } ; //it's gonna be set with minizinc parsed result and the target name\r\n        this.onOilsListClick = this.onOilsListClick.bind(this);\r\n        this.onButtonClick = this.onButtonClick.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('/getMinizincResults')\r\n            .then(response => response.json())\r\n            .then((result) => {\r\n                \r\n\r\n                this.setState({target: result['Target name:'], result: result});\r\n                \r\n            },\r\n            (error)=>{\r\n            console.log(error);  \r\n            }); \r\n    }\r\n\r\n    onOilsListClick(e){\r\n        fetch('/changeTarget',{\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-type': 'application/json; charset=UTF-8'\r\n            },\r\n            body: JSON.stringify({previousTarget: this.state.target, nextTarget: e.target.text})\r\n        })\r\n            .then(response => response.json())\r\n            .then((result)=>{\r\n                console.log(result);\r\n            })\r\n    }\r\n\r\n    onButtonClick(){\r\n        this.setState({isLoading: true});\r\n        fetch('/getMinizincResults')\r\n            .then(response => response.json())\r\n            .then((result) => {\r\n            this.setState({target: result['Target name:'], result: result, isLoading: false});\r\n            },\r\n            (error)=>{\r\n            console.log(error);  \r\n            });\r\n    }\r\n\r\n    render(){\r\n        if (this.state.result){\r\n            const buttonStyles = {\r\n                display: 'flex',\r\n                alignItems: 'center'\r\n            }\r\n            return (\r\n                <BrowserRouter>\r\n                <Navbar className=\"bg-olive\" expand=\"lg\" sticky='top'>\r\n                    <Navbar.Brand href=\"\">OZinc</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <NavItem href=\"/\">\r\n                                <NavLink as={Link} to=\"/\">Home</NavLink>\r\n                            </NavItem>\r\n                            <NavItem href=\"/data\">\r\n                                <NavLink as={Link} to=\"/data\">Concentrazioni</NavLink>\r\n                            </NavItem>\r\n                            \r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n                <Switch>\r\n                    <Route path=\"/data\">\r\n                        <ChangeInputData/>\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            width: '30%',\r\n                            height: '50px',\r\n                            alignItems: 'center', \r\n                            justifyContent: 'flex-start'\r\n                        }}>\r\n                        <DropdownButton \r\n                            title=\"Target\" \r\n                            id={\"dropdown-variants-primary\"} \r\n                            variant=\"primary\" \r\n                            style={{\r\n                                margin: '20px'\r\n                            }}>\r\n                                {Object.keys(this.state.result[\"Oils Composition:\"]).map((oil_names, index) => (\r\n                                    <Dropdown.Item eventKey={'navdropdown'+oil_names} onClick={this.onOilsListClick}>{oil_names}</Dropdown.Item> \r\n                                ))}\r\n                            \r\n                        <Dropdown.Item eventKey={'navdropdown_target'} style={{color: '#708238'}} onClick={this.onOilsListClick}>{this.state.result['Target name:']}</Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <Button variant=\"primary\" disabled={this.isLoading} \r\n                            onClick={this.onButtonClick}\r\n                            style={{\r\n                                margin: '20px'\r\n                            }}>\r\n                            {this.isLoading ? 'Loading…' : 'Calcola'}\r\n                        </Button>\r\n                        </div>\r\n                        <OilsTable results={this.state.result} />\r\n                    </Route>\r\n                </Switch>\r\n            </BrowserRouter>\r\n            );    \r\n            \r\n        }\r\n        else {\r\n            return(\r\n                <div className=\"App\">\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}